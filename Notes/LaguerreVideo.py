from DESolver5 import *

mpmath.mp.dps = 300
mpmath.mp.prec = 300


plt.clf()

N = 30
it = 22
D = [0,30]

pf = [mpf('1.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061'), mpf('-2.3568356710592653308799450396862870926109650049337285785897997932931839696821573843598312653665351858622376666288442080592784220780911956407136280861511e-152'), mpf('-0.16680679822209938626002285449500732840607454022684306106681873877158185586463468968151270503956237184120908058332155040773176446031369579673612551314604'), mpf('0.00196448051478919301828384408780299978482708484086709697163948243106917925484815030449366325478267235601213838475476253521144336328153636608337923893819909'), mpf('0.0170391562912241886122108766639410151076847934135869516338471442334017783322268677484403041940216870576290394322199700981264011417831651917710313512932248'), mpf('0.0151570706369392422743938753026161909369522296326623324212118932700853738871489597881793023253814262811590119861116523223891290539624932849211306908744029'), mpf('-0.0199745070850873057960010090045534638829443854647824414702013440464723901688980469946795513795390811688453650850950188025224123392651168392298546544914687'), mpf('0.0104320906707491945848859891493129610158455385764376429866868342075432270623561908156277845699503086627897533880732484830484291304865863233549622880629145'), mpf('-0.00344561160196721268757899970395260154019887312685260203907360390890057820055264847697934265083173193342264881902095536624171414230527481528714466224753086'), mpf('0.000815782558930952239278307329661478909827229912907016946994082658197261596230921896624011825006192359189692194090805068800899736690412269009331322939492426'), mpf('-0.000146603215820600275004678449066141312177209494550811766210614199128172311278778711225803192486143646782838771305328325391670808168879748374208486035520145'), mpf('0.0000206563480859376030011630180561922398138913185253434537425279781336255737445291220756777532856625022906163149327189793627312071056817207206263508472411097'), mpf('-0.00000232947902953450982940907546922857912839527021313267294487128892815197501043923203171917857466146976373014608909757352155696243178589393973125634958055808'), mpf('0.000000213217669197610643836530167954318208730379447354259049845379164782506905568430725134694998375613558113555700352378479203815771240377358704059412860699997'), mpf('-0.0000000159941295440500041582003376449253250953164802250695255458645717208829680100384060113807382097611670266918340422216547900561925533292407969715719761259814'), mpf('0.000000000989851344222106987508473524915532394258145401656122235444943950007578730729539397411445545533760522049763499177276869985752449477504690086201431658677935'), mpf('-0.0000000000507603567812910545804323355686224156393909677369793859443844199200573211964923300668329699412503062825166440798155555020934854610268287372369596024528109'), mpf('0.0000000000021618542845290554755702739459825036072046771622859444714805367814750779055992361897963237245719466597049560991330546684710060141496646670357771471312108'), mpf('-0.0000000000000765020325326586695342505028170736116228633574367755544771865791479434848570622259727158758273248072804708391124533530649311920141336977538468945483750795'), mpf('0.00000000000000224625955340028238928862544246065964366340896304233253060099769599691601522948529971729072096014327421004766833648311676061940667990649679953076832295478'), mpf('-0.0000000000000000545406963660023373932504398626444923978521056935082128993725252785312798961649627295404422209068296765631047835026927720726129100912759191082059972740051'), mpf('0.00000000000000000108891601473637566404700365394861891874065964173001783715323496723406169964605795241693148793034043454958388629117375750404550576446775461260404236644456'), mpf('-0.0000000000000000000177253795154159175701162601727313133826934299501800251227489931383998001969203927462558365168043773895892473197379709719870316305147715812322747276698155'), mpf('0.000000000000000000000232396857188162771796279594624969062100842008013307745885816849041533808098590756938557040314716394378637485902362997845341262950780092877587003199395115'), mpf('-0.00000000000000000000000241184525735959141299656543297650116912479065226979112074594631224715427028457097437350603277812666030355176781697409245252601043187366228862271566883644'), mpf('0.00000000000000000000000001931987310143306500095830871058596080473341602494834129928058486069613591929005390976280526667155810813749506018348237977581874139972047720837175044556'), mpf('-0.000000000000000000000000000114986663887520787831224013781929979369097138197497934683791892865950555478010468143416368571518058147316880056511605542263324616659107119969048483742511'), mpf('0.00000000000000000000000000000047790439154631064631184387688060299480228159080540127054432647562197515907671854349047329581902889797468487205345233944899791290666896216343349287917039'), mpf('-0.00000000000000000000000000000000123578637502138894957412907431362028419253576083566768701573222565237497955184876013135313683365200459605944119129464987335543963120147002756830942942108'), mpf('0.00000000000000000000000000000000000149436474407046701459556335185503440715963703308056651073494416961463866137331176162479177535260435559680639549045535861267044219452864354947519732956405')]


n = 3
points = 200
dx = (D[1]-D[0])/(points-1)
xlist = [D[0]+i*dx for i in range(points)]
y1list = [polyeval(pf,x) for x in xlist]


z1 = [1]
for i in range(it):

	# OUr ODE's Coefficients
	def g0(x):
		return n*polyeval(z1,x)**(n-1)

	def g1(x):
		return 2/x

	def g2(x):
		return 1

	# What our ODE equals
	def f(x):
		return (n-1)*polyeval(z1,x)**n

	g = [g0,g1,g2]
	z2 = DESolver(g,f,D=D,XY=[[0],[1]],DXDY=[[0],[0]],basis="l",N=N)

	def ser(x):
		return abs(x*n*polyeval(z1,x)**(n-1)*polyeval(z2,x)+2*polyeval(polydiff(z2),x)+x*polyeval(polydiffn(z2,2),x)-(n-1)*polyeval(z1,x)**n)


	z1 = z2

	ay1list = [polyeval(z1,x) for x in xlist]
	lab = "Iteration: " + str(i+1)

	plt.plot(xlist,ay1list,":g",label="Iterate")
	plt.plot(xlist,y1list,"-r",label="Final Approximate Solution")
	plt.legend(loc="upper left")
	ax = plt.gca()
	plt.title("Iteration "+str(i+1))

	ax.set_ylim([-10, 10])
	plt.show()
	plt.clf()